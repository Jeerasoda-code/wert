Library IEEE;
use IEEE. STD_LOGIC _1164 ALL; 

entity shiftregister is 
Port(clk,rst: in std_logic;
s=in std_logic_vector(3 downto 0); :
     m: in std_logic_vector(1 downto 0); 
     y: out std_logic_vector(3 downto 0)); 

end shiftregister;

architecture Behavioral of shiftregister is
signal t: std_logic_vector(3 downto 0);

begin
  process(clk, rst)
  begin
if rst ='1' then
  y <="0000";
    elsif clk'event and clk =' 1' then
    case m is
      when "00"=>  --SISO 
      t(3)<=s(0);--LSB as input S(0) 
      t(2)<= t(3);
      t(1) <= t(2);
      t(0)<= t(1);
      t(0)<= t(0); --LSB as output Y(0)
  when "01"=> --SIPO 
      t(3) <=s(0); --LSB as input s(0)
      t(2) <= t(3);
      t(1) <= t(2) ;
      t(0)<=t(1); --parallel output
      y<=t;  --parallel output
 when " 10"=>  --PIPO
      t<=s;
      y<=t;

 when "11" => - - P ISO
      t<=s; --4 bit input S&t<=s
      t(2) <= t(3);-- MSB input as t(3) < = S(3)
      t(1) <= t(2);
      t(0) <= t(1); 
      y(3) <= t(0); --MSB as output Y(3) <=S(3)

when others => NULL;
end case;
end if;
end process;
end Behavioral;
LIBRARY ieee;
USE ieee.std logic 1164. ALL;

ENTITY usr2 _tb IS
 END usr2 tb;

ARCHITECTURE behavior Of usr2 _tb;

COMPONENT shiftregister PORT (

cik: IN std_logic; 
rst: IN std_logic; 
s: IN std_ logic_vector(3 downto 8); 
s: IN std_logic_vector(1 downto 0); 
y: OUT std _logic_vector(3 downto 0)
 );

END COMPONENT;

--Inputs

signal clk: std _logic:= '0';

signal rst: std _logic :='0';

signals: std_logic_vector(3 downto 0): (others => '0');

signal: std_logic_vector(1 downto Ã©): (others => '0');

--Outputs

signal y :std_ logic_vector(3 downto 0);

BEGIN

--Instantiate the Unit Under Test (UUT)

uut: shiftregister PORT MAP ( clk => clk, 
rst => rst, 
 s=>s, 
m=>m,
y => y
 );

--Clock process definitions

clk _process: process

begin

clk <= '0';
wait for 3ns;
 clk <= '1'; 
wait for 3 ns;

end process;

--Stimulus process

stim _proc: process.

begin

rst <=^1' ; 
wait for 5 ns; 
rst <='0';
 wait for 5 ns;

--Test SISO Mode
 m <="00";
 s <=" 1 - 0 U";
 wait for 50 ns;

--Test SIPO Mode 
m<="01";
 s<="1UXX";
wait for 50 ns;

--Test PISO Mode 
m <=" 11";
 s <="1111^;
 wait for 50 ns;

--Test PIPO Mode
 m <= "10"; 
s<="1UU0";
 wait for 50 ns;

end process;
END;
